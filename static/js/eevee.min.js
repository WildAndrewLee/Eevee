function normalize(a) {
    return a[0].toUpperCase() + a.substring(1);
}

function options_from_obj(a) {
    var b = [];
    return Object.getOwnPropertyNames(a).forEach(function(c) {
        b.push([ JSON.stringify(a[c]), c ]);
    }), b;
}

function alpha_order_options(a) {
    var b = a.slice();
    return b.sort(function(a, b) {
        return a[1].localeCompare(b[1]);
    }), b;
}

function show_progress(a) {
    return 100 === a ? $("#progress").width(0).hide() : void $("#progress").css("width", a + "%").show();
}

function getJSON(a, b, c) {
    show_progress(0), $.ajax({
        dataType: "json",
        xhr: function() {
            var a = new XMLHttpRequest();
            return a.addEventListener("progress", function(a) {
                var b = a.loaded / a.total;
                show_progress(100 * b);
            }), a;
        },
        success: function(a) {
            show_progress(100), b(a);
        },
        fail: function() {
            c && c();
        },
        url: a
    });
}

function buff_to_num(a) {
    var b = 0;
    return a.forEach(function(c, d) {
        b |= c << 4 * (a.length - d - 1);
    }), b;
}

function swap_endian(a) {
    return a >> 24 & 255 | (a >> 16 & 255) << 8 | (a >> 8 & 255) << 16 | (255 & a) << 24;
}

function format_date(a) {
    var b = a.getMonth() + 1 + "", c = a.getDate() + "", d = a.getFullYear() + "";
    return c.length < 2 && (c = "0" + c), b.length < 2 && (b = "0" + b), d + "-" + b + "-" + c;
}

function FieldTemplate(a) {
    a = a || {}, this.label = a.label, this.value = a.value || a.selected, this.placeholder = a.placeholder, 
    this._validators = [], this.disabled = a.disabled || !1, this.field = null;
}

function TextField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>");
}

function SelectField(a) {
    FieldTemplate.call(this, a), this.field = $("<select>"), this.options = a.options || [];
}

function NumberField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>"), this.min = a.min || 0, this.max = a.max || 1, 
    this.placeholder = a.placeholder || this.min, this.addValidator(function(a) {
        return this.min <= a && a <= this.max;
    }), this.change(function(a) {
        a > this.max ? this.val(this.max) : a < this.min && this.val(this.min);
    });
}

function CheckField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>"), this.checked = a.checked || !1;
}

function DateField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>");
}

function Field(a) {
    a || (a = {});
    var b = {
        type: "text"
    };
    return Object.getOwnPropertyNames(b).forEach(function(c) {
        a.hasOwnProperty(c) || (a[c] = b[c]);
    }), "text" === a.type ? new TextField(a) : "select" === a.type ? new SelectField(a) : "number" === a.type ? new NumberField(a) : "check" === a.type ? new CheckField(a) : "date" === a.type ? new DateField(a) : null;
}

function Pokemon(a) {
    this.id = a, this.name = null, this.nickname = null, this.valid_moves = null, this.valid_abilities = null, 
    this.valid_natures = null, this.valid_forms = null, this.ability = 1, this.nature = 1, 
    this.exp_curve = null, this.level = 1, this.exp = 0, this.held_item = 0, this.happiness = 0, 
    this.form = null, this.language = 2, this.origin = 7, this.gender = Pokemon.MALE, 
    this.egg = !1, this.shiny = !1, this.pokerus1 = 0, this.pokerus2 = 0, this.location = 55, 
    this.ball = 500, this.met_date = format_date(new Date()), this.met_level = 1, this.encounter = 0, 
    this.fateful_encounter = !1, this.met_egg = !1, this.egg_location = 126, this.egg_date = format_date(new Date()), 
    this.move1 = null, this.move2 = null, this.move3 = null, this.move4 = null;
}

!function(a, b) {
    a.fn.disable = function() {
        a(this).prop("disabled", !0);
    }, a.fn.enable = function() {
        a(this).prop("disabled", !1);
    };
}(jQuery, window), function() {
    var a = this, b = {};
    "undefined" != typeof exports ? module.exports = b : a.fuzzy = b, b.simpleFilter = function(a, c) {
        return c.filter(function(c) {
            return b.test(a, c);
        });
    }, b.test = function(a, c) {
        return null !== b.match(a, c);
    }, b.match = function(a, b, c) {
        c = c || {};
        var d, e = 0, f = [], g = b.length, h = 0, i = 0, j = c.pre || "", k = c.post || "", l = c.caseSensitive && b || b.toLowerCase();
        a = c.caseSensitive && a || a.toLowerCase();
        for (var m = 0; g > m; m++) d = b[m], l[m] === a[e] ? (d = j + d + k, e += 1, i += 1 + i) : i = 0, 
        h += i, f[f.length] = d;
        return e === a.length ? {
            rendered: f.join(""),
            score: h
        } : null;
    }, b.filter = function(a, c, d) {
        return d = d || {}, c.reduce(function(c, e, f, g) {
            var h = e;
            d.extract && (h = d.extract(e));
            var i = b.match(a, h, d);
            return null != i && (c[c.length] = {
                string: i.rendered,
                score: i.score,
                index: f,
                original: e
            }), c;
        }, []).sort(function(a, b) {
            var c = b.score - a.score;
            return c ? c : a.index - b.index;
        });
    };
}();

var cache = {
    _version: 1,
    _gen_key: function(a) {
        return "v" + cache._version + "_" + a;
    },
    setup: function() {
        Object.keys(localStorage).forEach(function(a) {
            var b = a.match(/^v(\d+)_/);
            b && parseInt(b[1]) === cache._version || delete localStorage[a];
        });
    },
    set: function(a, b) {
        a = cache._gen_key(a), localStorage[a] = b;
    },
    get: function(a) {
        return a = cache._gen_key(a), localStorage[a];
    }
}, API = {
    get_pokemon: function() {
        return new Promise(function(a, b) {
            getJSON("/api/pokemon", a);
        });
    },
    get_pokemon_info: function(a) {
        return new Promise(function(b, c) {
            getJSON("/api/pokemon/" + a, b);
        });
    },
    get_natures: function() {
        return new Promise(function(a, b) {
            return API.NATURES ? a(API.NATURES) : void getJSON("/api/natures", function(b) {
                API.NATURES = b, a(b);
            });
        });
    },
    get_items: function() {
        return new Promise(function(a, b) {
            return API.ITEMS ? a(API.ITEMS) : void getJSON("/api/items", function(b) {
                API.ITEMS = b, a(b);
            });
        });
    },
    get_languages: function() {
        return new Promise(function(a, b) {
            return API.LANGUAGES ? a(API.LANGUAGES) : void getJSON("/api/languages", function(b) {
                API.LANGUAGES = b, a(b);
            });
        });
    },
    get_hometowns: function() {
        return new Promise(function(a, b) {
            return API.HOMETOWNS ? a(API.HOMETOWNS) : void getJSON("/api/hometowns", function(b) {
                API.HOMETOWNS = b, a(b);
            });
        });
    },
    get_locations: function() {
        return new Promise(function(a, b) {
            return API.LOCATIONS ? a(API.LOCATIONS) : void getJSON("/api/locations", function(b) {
                API.LOCATIONS = b, a(b);
            });
        });
    },
    get_pokeballs: function() {
        return new Promise(function(a, b) {
            return API.POKEBALLS ? a(API.POKEBALLS) : void getJSON("/api/pokeballs", function(b) {
                API.POKEBALLS = b, a(b);
            });
        });
    },
    get_encounters: function() {
        return new Promise(function(a, b) {
            return API.ENCOUNTER_OPTIONS ? a(API.ENCOUNTER_OPTIONS) : void getJSON("/api/encounters", function(b) {
                API.ENCOUNTER_OPTIONS = b, a(b);
            });
        });
    },
    prepare: function() {
        return Promise.all([ API.get_natures(), API.get_items(), API.get_languages(), API.get_hometowns(), API.get_locations(), API.get_encounters() ]).then(API.get_pokeballs);
    },
    NATURES: null,
    ITEMS: null,
    POKEBALLS: null,
    LANGUAGES: null,
    HOMETOWNS: null,
    LOCATIONS: null,
    ENCOUNTER_OPTIONS: null
};

FieldTemplate.prototype.addValidator = function(a) {
    return this._validators.push(a), this;
}, FieldTemplate.prototype.isValid = function() {
    for (var a = 0; a < this._validators.length; a++) if (!this._validators[a].call(this, this.val())) return !1;
    return !0;
}, FieldTemplate.prototype.change = function(a) {
    var b = this;
    return $(this.field).change(function() {
        a.call(b, $(this).val());
    }), this;
}, FieldTemplate.prototype.val = function(a) {
    return void 0 !== a ? ($(this.field).val(a), this) : $(this.field).val();
}, FieldTemplate.prototype.render = function() {
    return $("<div>").addClass("input-group").append($("<label>").text(this.label));
}, FieldTemplate.prototype.disable = function() {
    this.field.disable();
}, FieldTemplate.prototype.enable = function() {
    this.field.enable();
}, TextField.prototype = new FieldTemplate(), TextField.prototype.render = function() {
    return this.field.attr({
        type: "text",
        disabled: this.disabled,
        placeholder: this.placeholder,
        value: this.value
    }), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, SelectField.prototype = new FieldTemplate(), SelectField.prototype.render = function() {
    var a = this;
    return this.field.attr({
        disabled: this.disabled
    }), this.options.forEach(function(b) {
        a.field.append($("<option>").val(b[0]).text(b[1]));
    }), this.field.val(this.value), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, NumberField.prototype = new FieldTemplate(), NumberField.prototype.render = function() {
    return this.field.attr({
        type: "number",
        min: this.min,
        max: this.max,
        placeholder: this.placeholder,
        value: this.value,
        disabled: this.disabled
    }), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, CheckField.prototype = new FieldTemplate(), CheckField.prototype.render = function() {
    return this.field.attr({
        type: "checkbox",
        checked: this.checked,
        disabled: this.disabled
    }), FieldTemplate.prototype.render.call(this).append($(this.field).wrap('<div class="check-group"></div>').parent()).wrap('<div class="input-wrapper"></div>').parent();
}, CheckField.prototype.change = function(a) {
    var b = this;
    return $(this.field).change(function() {
        a.call(b, $(this).prop("checked"));
    }), this;
}, DateField.prototype = new FieldTemplate(), DateField.prototype.render = function() {
    return this.field.attr({
        type: "date",
        disabled: this.disabled,
        value: this.value
    }), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, Pokemon.MALE = 1, Pokemon.FEMALE = 2, Pokemon.GENDERLESS = 3, Pokemon.prototype.load = function() {
    function a(a) {
        b.name = a.name, b.valid_forms = a.forms, b.valid_moves = a.moves, b.valid_abilities = a.abilities, 
        b.exp_curve = a.growth, b.typing = a.typing, b.valid_gender = a.gender, b.is_genderless() ? b.gender = Pokemon.GENDERLESS : b.only_male() ? b.gender = Pokemon.MALE : b.only_female() && (b.gender = Pokemon.FEMALE);
    }
    var b = this, c = eevee.cache.get("pokemon-data-" + this.id);
    return c ? new Promise(function(b, d) {
        a(JSON.parse(c)), b(c);
    }) : API.get_pokemon_info(this.id).then(function(c) {
        eevee.cache.set("pokemon-data-" + b.id, JSON.stringify(c)), a(c);
    });
}, Pokemon.prototype.exp_for_level = function(a) {
    return this.exp_curve[a - 1];
}, Pokemon.prototype.level_from_exp = function(a) {
    for (var b = 0; b < this.exp_curve.length; b++) if (this.exp_curve[b] > a) return b;
}, Pokemon.prototype.is_genderless = function() {
    return !this.valid_gender.male && !this.valid_gender.female;
}, Pokemon.prototype.only_male = function() {
    return this.valid_gender.male && !this.valid_gender.female;
}, Pokemon.prototype.only_female = function() {
    return !this.valid_gender.male && this.valid_gender.female;
}, Pokemon.prototype.render = function() {
    var a = this, b = alpha_order_options(options_from_obj(API.NATURES)), c = alpha_order_options(options_from_obj(API.ITEMS)), d = alpha_order_options(options_from_obj(this.valid_abilities)), e = [ [ 0, "Not Available" ] ], f = alpha_order_options(options_from_obj(API.LANGUAGES)), g = alpha_order_options(options_from_obj(API.HOMETOWNS)), h = alpha_order_options(options_from_obj(API.LOCATIONS)), i = alpha_order_options(options_from_obj(API.POKEBALLS)), j = alpha_order_options(options_from_obj(API.ENCOUNTER_OPTIONS));
    this.valid_forms && (e = alpha_order_options(options_from_obj(this.valid_forms))), 
    this.$thumbnail = $("<img>").attr("src", "/img/pokemon/" + this.id + ".png"), this.$typing = $("<div>").addClass("typing"), 
    this.typing.forEach(function(b) {
        a.$typing.append($("<span>").addClass("type").addClass(b).text(normalize(b)));
    }), this.$name = Field({
        label: "Pokémon Name",
        value: this.name,
        disabled: !0
    }), this.$nickname = Field({
        label: "Nickname",
        value: this.nickname
    }), this.$nature = Field({
        label: "Nature",
        type: "select",
        options: b,
        selected: this.nature
    }), this.$ability = Field({
        label: "Ability",
        type: "select",
        options: d,
        selected: d[0][0]
    }).change(function(b) {
        a.ability = b;
    }), this.$level = Field({
        label: "Level",
        type: "number",
        min: 1,
        max: 100,
        value: this.level
    }).change(function(b) {
        a.$exp.val(a.exp_for_level(b));
    }), this.$exp = Field({
        label: "Experience",
        type: "number",
        min: 0,
        max: this.exp_curve[this.exp_curve.length - 1],
        value: this.exp
    }).change(function(b) {
        a.$level.val(a.level_from_exp(b));
    }), this.$held = Field({
        label: "Held Item",
        type: "select",
        options: c,
        selected: this.held_item
    }), this.$happiness = Field({
        label: "Happiness",
        type: "number",
        min: 0,
        max: 255,
        value: this.happiness
    }), this.$form = Field({
        label: "Form",
        type: "select",
        disabled: !this.valid_forms,
        selected: null === this.form ? 0 : this.form,
        options: e
    }), this.$lang = Field({
        label: "Language",
        type: "select",
        selected: this.language,
        options: f
    }), this.$origin = Field({
        label: "Origin",
        type: "select",
        selected: this.origin,
        options: g
    }), this.$gender = Field({
        label: "Gender",
        type: "select",
        selected: this.gender,
        options: this.is_genderless() ? [ [ Pokemon.GENDERLESS, "Genderless" ] ] : [ [ Pokemon.MALE, "Male" ], [ Pokemon.FEMALE, "Female" ] ],
        disabled: this.is_genderless() || this.only_male() || this.only_female()
    }), this.$egg = Field({
        label: "Egg",
        type: "check",
        checked: this.egg
    }).change(function(b) {
        b ? (a.$met_egg.disable(), a.$egg_location.disable(), a.$egg_date.disable()) : (a.$met_egg.enable(), 
        a.$egg_location.enable(), a.$egg_date.enable());
    }), this.$shiny = Field({
        label: "Shiny",
        type: "check",
        checked: this.shiny
    }), this.$pokerus1 = Field({
        label: "Pokérus Strain",
        type: "number",
        min: 0,
        max: 4,
        value: this.pokerus1
    }), this.$pokerus2 = Field({
        label: "Pokérus Duration",
        type: "number",
        min: 0,
        max: 4,
        value: this.pokerus2
    });
    var k = $("<aside>").addClass("fields main").append(this.$name.render()).append(this.$nickname.render()).append(this.$nature.render()).append(this.$ability.render()).append($("<div>").addClass("input-grouped").append(this.$level.render()).append(this.$exp.render())).append(this.$held.render()).append(this.$happiness.render()).append(this.$form.render()).append(this.$lang.render()).append(this.$origin.render()).append(this.$gender.render()).append($("<div>").addClass("input-grouped other-group").append(this.$egg.render()).append(this.$shiny.render()).append(this.$pokerus1.render()).append(this.$pokerus2.render()));
    this.$location = Field({
        label: "Location",
        type: "select",
        options: h,
        selected: this.location
    }), this.$ball = Field({
        label: "Ball",
        type: "select",
        options: i,
        selected: this.ball
    }), this.$met_date = Field({
        label: "Date",
        type: "date",
        value: this.met_date
    }), this.$met_level = Field({
        label: "Level",
        type: "number",
        value: this.met_level,
        min: 1,
        max: 100
    }), this.$encounter = Field({
        label: "Encounter",
        type: "select",
        selected: this.encounter,
        options: j
    }), this.$fateful_encounter = Field({
        label: "Fateful Encounter",
        type: "check",
        checked: this.fateful_encounter
    }), this.$met_egg = Field({
        label: "As Egg",
        type: "check",
        checked: this.met_egg,
        disabled: this.egg
    }), this.$egg_location = Field({
        label: "Hatch Location",
        type: "select",
        options: h,
        value: this.egg_location,
        disabled: !this.egg && this.met_egg
    }), this.$egg_date = Field({
        label: "Hatch Date",
        type: "date",
        value: this.egg_date,
        disabled: !this.egg && this.met_egg
    });
    var l = $("<aside>").addClass("fields met").append(this.$location.render()).append(this.$ball.render()).append(this.$met_level.render()).append(this.$met_date.render()).append(this.$encounter.render()).append(this.$fateful_encounter.render()).append(this.$met_egg.render()).append(this.$egg_location.render()).append(this.$egg_date.render());
    return this.$editor = $("<section>").addClass("editor").append($("<nav>").append($("<span>").addClass("main-button selected").text("Main").click(function() {
        a.$editor.find(".fields").hide(), $(".fields.main").show(), a.$editor.find("nav span").removeClass("selected"), 
        $(this).addClass("selected");
    })).append($("<span>").addClass("met-button").text("Met").click(function() {
        a.$editor.find(".fields").hide(), $(".met.fields").show(), a.$editor.find("nav span").removeClass("selected"), 
        $(this).addClass("selected");
    })).append($("<span>").addClass("stats-button").text("Stats")).append($("<span>").addClass("moves-button").text("Moves")).append($("<span>").addClass("ribbons-button").text("Ribbons")).append($("<span>").addClass("misc-button").text("Misc")).append($("<span>").addClass("choose-again-button").text("Start Over").click(eevee.reset)).append($("<span>").addClass("save-button").text("Save"))).append($("<aside>").addClass("row").append($("<figure>").append(this.$thumbnail).append(this.$typing)).append(k).append(l)), 
    this.$editor;
};

var eevee = {
    _scrollTop: $(window).scrollTop(),
    cache: cache,
    pokemon: null,
    load_image: function(a) {
        return new Promise(function(b, c) {
            var d = new Image(), e = function() {
                d.removeEventListener("load", e), b(d);
            };
            d.addEventListener("load", e), d.src = a;
        });
    },
    load_thumbnails: function() {
        return new Promise(function(a, b) {
            API.get_pokemon().then(function(c) {
                eevee.pokemon = c;
                for (var d = [], e = 1; e <= c.length; e++) d.push(eevee.load_image("/img/pokemon/" + e + ".png"));
                Promise.all(d).then(function(b) {
                    b.forEach(function(a, b) {
                        $("#thumbnails").append($("<figure>").append($(a).attr("id", "poke-" + (b + 1)).attr("title", c[b]).data("name", c[b])));
                    }), a();
                }, b);
            });
        });
    },
    setup: function() {
        return eevee.cache.setup(), eevee.load_thumbnails().then(API.prepare);
    },
    reset: function() {
        $(".editor").remove(), $("#search").show(), $("#thumbnails").show(), $(window).scrollTop(eevee._scrollTop);
    }
};

$(function() {
    eevee.setup().then(function() {
        $("#search-input").keyup(function() {
            if (!this.value.length) return $("#thumbnails figure").show();
            $("#thumbnails figure").show();
            var a = Array.prototype.slice.call($("#thumbnails img")), b = fuzzy.filter(this.value, a, {
                extract: function(a) {
                    return $(a).data("name");
                }
            });
            $("#thumbnails figure").hide(), b.forEach(function(a) {
                $("#thumbnails figure").eq(a.index).show();
            });
        }), $("#loading").hide(), $("#thumbnails img").click(function() {
            var a = parseInt(this.id.split("-")[1]), b = new Pokemon(a);
            b.load().then(function() {
                eevee._scrollTop = $(window).scrollTop(), $("#thumbnails").hide(), $("#search").hide(), 
                $("body").append(b.render());
            });
        });
    });
});
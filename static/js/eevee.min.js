function normalize(a) {
    return a[0].toUpperCase() + a.substring(1);
}

function options_from_obj(a) {
    var b = [];
    return Object.getOwnPropertyNames(a).forEach(function(c) {
        b.push([ JSON.stringify(a[c]), c ]);
    }), b;
}

function alpha_order_options(a) {
    var b = a.slice();
    return b.sort(function(a, b) {
        return a[1].localeCompare(b[1]);
    }), b;
}

function FieldTemplate(a) {
    a = a || {}, this.label = a.label, this.value = a.value || a.selected, this.placeholder = a.placeholder, 
    this._validators = [], this.disabled = a.disabled || !1, this.field = null;
}

function TextField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>");
}

function SelectField(a) {
    FieldTemplate.call(this, a), this.field = $("<select>"), this.options = a.options || [];
}

function NumberField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>"), this.min = a.min || 0, this.max = a.max || 1, 
    this.placeholder = a.placeholder || this.min, this.addValidator(function(a) {
        return this.min <= a && a <= this.max;
    }), this.change(function(a) {
        a > this.max ? this.val(this.max) : a < this.min && this.val(this.min);
    });
}

function CheckField(a) {
    FieldTemplate.call(this, a), this.field = $("<input>"), this.checked = a.checked || !1;
}

function Field(a) {
    a || (a = {});
    var b = {
        type: "text"
    };
    return Object.getOwnPropertyNames(b).forEach(function(c) {
        a.hasOwnProperty(c) || (a[c] = b[c]);
    }), "text" == a.type ? new TextField(a) : "select" == a.type ? new SelectField(a) : "number" == a.type ? new NumberField(a) : "check" == a.type ? new CheckField(a) : null;
}

function Pokemon(a) {
    this.id = a, this.name = null, this.nickname = null, this.valid_moves = null, this.valid_abilities = null, 
    this.valid_natures = null, this.valid_forms = null, this.ability = 1, this.nature = 1, 
    this.exp_curve = null, this.level = 1, this.exp = 0, this.held_item = 0, this.happiness = 0, 
    this.form = null, this.language = 2, this.origin = 7, this.gender = -1, this.egg = !1, 
    this.shiny = !1, this.pokerus1 = 0, this.pokerus2 = 0, this.move1 = null, this.move2 = null, 
    this.move3 = null, this.move4 = null;
}

var API = {
    get_pokemon_info: function(a) {
        return new Promise(function(b, c) {
            $.getJSON("/api/pokemon/" + a, b);
        });
    },
    get_natures: function() {
        return new Promise(function(a, b) {
            return API.NATURES ? a(API.NATURES) : void $.getJSON("/api/natures", function(b) {
                API.NATURES = b, a(b);
            });
        });
    },
    get_items: function() {
        return new Promise(function(a, b) {
            return API.ITEMS ? a(API.ITEMS) : void $.getJSON("/api/items", function(b) {
                API.ITEMS = b, a(b);
            });
        });
    },
    get_languages: function() {
        return new Promise(function(a, b) {
            return API.LANGUAGES ? a(API.LANGUAGES) : void $.getJSON("/api/languages", function(b) {
                API.LANGUAGES = b, a(b);
            });
        });
    },
    get_hometowns: function() {
        return new Promise(function(a, b) {
            return API.HOMETOWNS ? a(API.HOMETOWNS) : void $.getJSON("/api/hometowns", function(b) {
                API.HOMETOWNS = b, a(b);
            });
        });
    },
    prepare: function() {
        return Promise.all([ API.get_natures(), API.get_items(), API.get_languages(), API.get_hometowns() ]);
    },
    NATURES: null,
    ITEMS: null,
    LANGUAGES: null,
    HOMETOWNS: null
};

FieldTemplate.prototype.addValidator = function(a) {
    return this._validators.push(a), this;
}, FieldTemplate.prototype.isValid = function() {
    for (var a = 0; a < this._validators.length; a++) if (!this._validators[a].call(this, this.val())) return !1;
    return !0;
}, FieldTemplate.prototype.change = function(a) {
    var b = this;
    return $(this.field).change(function() {
        a.call(b, $(this).val());
    }), this;
}, FieldTemplate.prototype.val = function(a) {
    return void 0 !== a ? (this.value = a, $(this.field).val(a), this) : this.value;
}, FieldTemplate.prototype.render = function() {
    return $("<div>").addClass("input-group").append($("<label>").text(this.label));
}, TextField.prototype = new FieldTemplate(), TextField.prototype.render = function() {
    var a = this;
    return this.field.attr({
        type: "text",
        disabled: this.disabled,
        placeholder: this.placeholder,
        value: this.value
    }).change(function() {
        a.value = $(this).val();
    }), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, SelectField.prototype = new FieldTemplate(), SelectField.prototype.render = function() {
    var a = this;
    return this.field.attr({
        disabled: this.disabled
    }).change(function() {
        a.value = $(this).val();
    }), this.options.forEach(function(b) {
        a.field.append($("<option>").val(b[0]).text(b[1]));
    }), this.field.val(this.value), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, NumberField.prototype = new FieldTemplate(), NumberField.prototype.render = function() {
    var a = this;
    return this.field.attr({
        type: "number",
        min: this.min,
        max: this.max,
        placeholder: this.placeholder,
        value: this.value,
        disabled: this.disabled
    }).change(function() {
        a.value = $(this).val();
    }), FieldTemplate.prototype.render.call(this).append(this.field).wrap('<div class="input-wrapper"></div>').parent();
}, CheckField.prototype = new FieldTemplate(), CheckField.prototype.render = function() {
    var a = this;
    return this.field.attr({
        type: "checkbox",
        checked: this.checked,
        disabled: this.disabled
    }).change(function() {
        a.checked = this.checked;
    }), FieldTemplate.prototype.render.call(this).append($("<div>").addClass("check-group").append(this.field)).wrap('<div class="input-wrapper"></div>').parent();
}, Pokemon.MALE = 1, Pokemon.FEMALE = 2, Pokemon.GENDERLESS = 3, Pokemon.prototype.load = function() {
    var a = this;
    return API.get_pokemon_info(this.id).then(function(b) {
        a.name = b.name, a.valid_forms = b.forms, a.valid_moves = b.moves, a.valid_abilities = b.abilities, 
        a.exp_curve = b.growth, a.typing = b.typing, a.valid_gender = b.gender;
    });
}, Pokemon.prototype.exp_for_level = function(a) {
    return this.exp_curve[a - 1];
}, Pokemon.prototype.level_from_exp = function(a) {
    for (var b = 0; b < this.exp_curve.length; b++) if (this.exp_curve[b] > a) return b;
}, Pokemon.prototype.is_genderless = function() {
    return !this.valid_gender.male && !this.valid_gender.female;
}, Pokemon.prototype.render = function() {
    var a = this, b = alpha_order_options(options_from_obj(API.NATURES)), c = alpha_order_options(options_from_obj(API.ITEMS)), d = alpha_order_options(options_from_obj(this.valid_abilities)), e = [ [ 0, "Not Available" ] ], f = alpha_order_options(options_from_obj(API.LANGUAGES)), g = alpha_order_options(options_from_obj(API.HOMETOWNS));
    this.valid_forms && (e = alpha_order_options(options_from_obj(this.valid_forms))), 
    this.$thumbnail = $("<img>").attr("src", "/img/pokemon/" + this.id + ".png"), this.$typing = $("<div>").addClass("typing"), 
    this.typing.forEach(function(b) {
        a.$typing.append($("<span>").addClass("type").addClass(b).text(normalize(b)));
    }), this.$name = Field({
        label: "Pokémon Name",
        value: this.name,
        disabled: !0
    }), this.$nickname = Field({
        label: "Nickname",
        value: this.nickname
    }), this.$nature = Field({
        label: "Nature",
        type: "select",
        options: b,
        selected: this.nature
    }), this.$ability = Field({
        label: "Ability",
        type: "select",
        options: d,
        selected: this.ability
    }).change(function(b) {
        a.ability = b;
    }), this.$level = Field({
        label: "Level",
        type: "number",
        min: 1,
        max: 100,
        value: this.level
    }).change(function(b) {
        a.$exp.val(a.exp_for_level(b));
    }), this.$exp = Field({
        label: "Experience",
        type: "number",
        min: 0,
        max: this.exp_curve[this.exp_curve.length - 1],
        value: this.exp
    }).change(function(b) {
        a.$level.val(a.level_from_exp(b));
    }), this.$held = Field({
        label: "Held Item",
        type: "select",
        options: c,
        selected: this.held_item
    }), this.$happiness = Field({
        label: "Happiness",
        type: "number",
        min: 0,
        max: 255,
        value: this.happiness
    }), this.$form = Field({
        label: "Form",
        type: "select",
        disabled: !this.valid_forms,
        selected: null === this.form ? 0 : this.form,
        options: e
    }), this.$lang = Field({
        label: "Language",
        type: "select",
        selected: this.language,
        options: f
    }), this.$origin = Field({
        label: "Origin",
        type: "select",
        selected: this.origin,
        options: g
    }), this.$gender = Field({
        label: "Gender",
        type: "select",
        selected: this.gender,
        options: this.is_genderless() ? [ [ Pokemon.GENDERLESS, "Genderless" ] ] : [ [ Pokemon.MALE, "Male" ], [ Pokemon.FEMALE, "Female" ] ],
        disabled: this.is_genderless()
    }), this.$egg = Field({
        label: "Egg",
        type: "check",
        checked: this.egg
    }), this.$shiny = Field({
        label: "Shiny",
        type: "check",
        checked: this.shiny
    }), this.$pokerus1 = Field({
        label: "Pokérus Strain",
        type: "number",
        min: 0,
        max: 4,
        value: this.pokerus1
    }), this.$pokerus2 = Field({
        label: "Pokérus Duration",
        type: "number",
        min: 0,
        max: 4,
        value: this.pokerus2
    });
    var h = $("<aside>").addClass("grow").append(this.$name.render()).append(this.$nickname.render()).append(this.$nature.render()).append(this.$ability.render()).append($("<div>").addClass("input-grouped").append(this.$level.render()).append(this.$exp.render())).append(this.$held.render()).append(this.$happiness.render()).append(this.$form.render()).append(this.$lang.render()).append(this.$origin.render()).append(this.$gender.render()).append($("<div>").addClass("input-grouped other-group").append(this.$egg.render()).append(this.$shiny.render()).append(this.$pokerus1.render()).append(this.$pokerus2.render()));
    return this.$editor = $("<section>").addClass("editor").append($("<nav>").append($("<span>").addClass("main-button selected").text("Main")).append($("<span>").addClass("met-button").text("Met")).append($("<span>").addClass("stats-button").text("Stats")).append($("<span>").addClass("moves-button").text("Moves")).append($("<span>").addClass("ribbons-button").text("Ribbons")).append($("<span>").addClass("misc-button").text("Misc")).append($("<span>").addClass("choose-again-button").text("Start Over")).append($("<span>").addClass("save-button").text("Save"))).append($("<section>").addClass("fields main").append($("<aside>").addClass("row").append($("<figure>").append(this.$thumbnail).append(this.$typing)).append(h))), 
    this.$editor;
}, $(function() {
    API.prepare().then(function() {
        var a = new Pokemon(386);
        a.load().then(function() {
            $("body").append(a.render()), window.dewgong = a;
        });
    });
});